- name: Everbase
  nodetype: namespace
  members:
    - name: Global
      nodetype: class
      operations:
        - name: GetSyncStatus
          static: true
          return: { name: SyncStatus, type: Everbase::SyncStatus }
      events:
        - name: EventConflictsResolved
          id: b8fcafcd-05ca-4229-b12e-fb356649243b
          values:
            - { name: Conflicts, type: Everbase::Conflicts }
            - { name: ConflictsTheSec, type: Everbase::ConflictsTheSec }

    - name: Path
      nodetype: class
      valueType: true
      operations:
        - name: FromId
          static: true
          synchronous: true
          return: { name: Path, type: Everbase::Path }
          params:
            - { name: ObjectId, type: Everbase::Uuid }
            - { name: VersionId, type: Everbase::Uuid }

    - name: User
      nodetype: class
      operations:
        - name: Create
          static: true
          return: { name: User, type: Everbase::User }
          params:
            - { name: Domain, type: Everbase::Domain }
            - { name: VCard, type: Everbase::String }
            - { name: Credential, type: Everbase::Credential }
        - name: GetAll
          static: true
          return: { name: User, type: [ Everbase::Set, Gu::Kaese::BitteEinBit ] }
          params:
            - { name: Domain, type: Everbase::Domain }

    - name: Permission
      nodetype: class
      operations:
        - name: SetMode
          synchronous: false
          params:
            - { name: Mode, type: Everbase::PermissionMode }
        - name: GetMode
          return: { name: Mode, type: Everbase::PermissionMode }

    - name: MetaData
      short: Meta
      nodetype: class
      doc: { brief: 'Key-value store', more: 'Maps strings to bytes' }
      operations:
        - name: SetValue
          synchronous: false
          params:
            - { doc: { brief: bla, more: blubb },
                name: Key, type: Everbase::String }
            - { name: Value, type: [ Everbase::Vector, Everbase::Byte ] }
        - name: GetValue
          return: { name: Value, type: [ Everbase::Vector, Everbase::Byte ] }
          params:
            - { name: Key, type: Everbase::String }

    - name: Node
      nodetype: class
      operations:
        - name: GetStatus
          static: true
          return: { name: Status, type: Everbase::NodeStatus }
          params:
            - { name: Profile, type: Everbase::Profile }
            - { name: Path, type: Everbase::Path }
            - { name: Path, type: Everbase::Path }
        - name: GetVersions
          return: { name: VersionedPaths, type: [ Everbase::List, Everbase::Path ] }
          doc: { brief: 'paths contain embedded version information' }
        - name: GetMetadata
          return: { name: Metadata, type: Everbase::MetaData }

    - name: Directory
      short: Dir
      nodetype: class
      inherits: Everbase::Node
      operations:
        - name: Create
          static: true
          doc: { brief: 'create something', more: 'creates vacuum between developers ears' }
          return: { name: Directory, type: Everbase::Directory }
          params:
            - { name: Profile, type: Everbase::Profile }
            - { name: Parent, type: Everbase::Path }
            - { name: Name, type: Everbase::String }
        - name: Open
          static: true
          return: { name: Directory, type: Everbase::Directory }
          params:
            - { name: Profile, type: Everbase::Profile }
            - { name: Path, type: Everbase::Path }
        - name: GetEntries
          return: { name: Entries, type: [ Everbase::Set, Everbase::Path ] }

    - name: Profile
      nodetype: class
      inherits: Everbase::Directory
      prime: Node
      doc: { brief: 'allows iteration over authenticated domains' }
      operations:
        - name: GetAll
          static: true
          return: { name: Ids, type: [ Everbase::Set, Everbase::Uuid ] }
        - name: GetTransfers
          return: { name: Paths, type: [ Everbase::Set, Everbase::Path ] }
          params:
            - { name: Recursive, type: Everbase::Boolean }

    - name: File
      nodetype: class
      inherits: Everbase::Node
      operations:
        - name: Write
          params:
            - { name: SourceBuffer, type: Everbase::ConstBuffer }
        - name: Read
          return: { name: BytesRead, type: Everbase::UInt32 }
          params:
            - { name: TargetBuffer, type: Everbase::Buffer }
            - { name: FillBuffer, type: Everbase::Boolean }

    # structs

    - name: SyncStatus
      nodetype: struct
      fields:
        - { name: Mode, type: Everbase::SyncMode }
        - { name: UploadSpeed, type: Everbase::UInt32 }   # bytes per second
        - { name: DownloadSpeed, type: Everbase::UInt32 } # bytes per second
        - { name: Conflicts, type: Everbase::UInt32 }

    - name: Conflicts
      nodetype: struct
      fields:
        - { name: Good, type: Everbase::SyncMode }
        - { name: Bad, type: Everbase::UInt32 }

    - name: ConflictsTheSec
      nodetype: struct
      fields:
        - { name: GoodII, type: Everbase::SyncMode }
        - { name: BadII, type: Everbase::UInt32 }

    #enums

    - name: SyncMode
      nodetype: enum
      values:
        - { name: Idle, value: 0x1 }
        - { name: Waiting, value: 0x2 }
        - { name: Uploading, value: 0x4 }
        - { name: Downloading, value: 0x8 }

    - name: NodeType
      nodetype: enum
      values:
        - { name: Directory, value: 0x1 } # b0001
        - { name: Root, value: 0x3 }      # b0011 (is a Directory)
        - { name: EverbaseDomain, value: 0x5 }    # b0101 (is a Directory)
        - { name: File, value: 0x8 }      # b1000

    #primitives

    - name: Byte
      nodetype: primitive
      primitivetype: byte

    - name: UInt32
      nodetype: primitive
      primitivetype: uint32

    - name: UInt64
      nodetype: primitive
      primitivetype: uint64

    - name: Float
      nodetype: primitive
      primitivetype: float

    - name: Boolean
      nodetype: primitive
      primitivetype: bool

    - name: Timestamp
      nodetype: primitive
      primitivetype: timestamp

    - name: String
      nodetype: primitive
      primitivetype: string

    - name: Uuid
      nodetype: primitive
      primitivetype: uuid

    - name: Buffer
      nodetype: primitive
      primitivetype: buffer

    - name: ConstBuffer
      nodetype: primitive
      primitivetype: const-buffer

    # containers

    - name: Vector
      nodetype: container
      containertype: vector

    - name: List
      nodetype: container
      containertype: list

    - name: Set
      nodetype: container
      containertype: set

- name: Gu
  nodetype: namespace
  members:

    - name: Wurst
      nodetype: primitive
      primitivetype: string

    - name: Kaese
      nodetype: namespace
      members:

        - name: Butter
          nodetype: primitive
          primitivetype: float

        - name: Glibsch
          nodetype: namespace
          members:

            - name: SyncMode
              nodetype: enum
              values:
                - { name: IdleX, value: 0x1 }
                - { name: WaitingX, value: 0x2 }
                - { name: UploadingX, value: 0x4 }
                - { name: DownloadingX, value: 0x8 }

    - name: String
      nodetype: primitive
      primitivetype: uuid

- name: Everbase
  nodetype: namespace
  members:

    - name: EverBass
      nodetype: primitive
      primitivetype: byte

    - name: PermissionMode
      nodetype: primitive
      primitivetype: uint32

    - name: Credential
      nodetype: primitive
      primitivetype: string

    - name: Domain
      nodetype: primitive
      primitivetype: string

    - name: NodeStatus
      nodetype: primitive
      primitivetype: string

    - name: UserEntity
      nodetype: primitive
      primitivetype: uint64

- name: Gu
  nodetype: namespace
  members:

    - name: Bier
      nodetype: primitive
      primitivetype: float

    - name: Kaese
      nodetype: namespace
      members:

        - name: BitteEinBit
          nodetype: primitive
          primitivetype: float

    - name: WurstKoffer
      nodetype: constant
      type: Gu::String
      value: "Deutsche Wurst - Alles andere ist KÃ¤se"
